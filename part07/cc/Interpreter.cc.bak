#include "Interpreter.h"
#include <string>
#include <cctype>

// Lexer ----------------------------------------------------
Token Lexer::get_next_token() {
    while (pos < text.size()){
        if (isspace(text[pos])) {
            skip_whitespace();
            continue;
        } else if (isdigit(text[pos])) {
            dvalue = number();
            return Token::NUM;
        } else if (text[pos] == '+') {
            ++pos;
            return Token::PLUS;
        } else if (text[pos] == '-') {
            ++pos;
            return Token::MINUS;
        } else if (text[pos] == '*') {
            ++pos;
            return Token::MUL;
        } else if (text[pos] == '/') {
            ++pos;
            return Token::DIV;
        } else if (text[pos] == '(') {
            ++pos;
            return Token::LPAREN;
        } else if (text[pos] == ')') {
            ++pos;
            return Token::RPAREN;
        } else
            error();
    }
    return Token::EOI;
}

void Lexer::skip_whitespace() {
    while (pos < text.size() && isspace(text[pos]))
        ++pos;
}

double Lexer::number() {
    double value = 0;
    while (pos < text.size() && isdigit(text[pos])) {
        value = value * 10 + text[pos] - '0';
        ++pos;
    }
    return value;
}

// Parser ----------------------------------------------------
AST* Parser::factor() {
    Token token = cur_token;
    AST* node = nullptr;
    if (token == Token::NUM) {
        node = new Num(Token::NUM, lexer.dvalue);
        eat(Token::NUM);
    } else if (cur_token == Token::LPAREN) {
        eat(Token::LPAREN);
        node = expr();
        eat(Token::RPAREN);
    }
    return node;
}

AST* Parser::term() {
    AST* node = factor();

    while (cur_token == Token::MUL || cur_token == Token::DIV) {
        if (cur_token == Token::MUL) {
            eat(Token::MUL);
            node = new BinOp(node, Token::MUL, factor());
        } else if (cur_token == Token::DIV) {
            eat(Token::DIV);
            node = new BinOp(node, Token::DIV, factor());
        }
    }
    return node;
}

AST* Parser::expr() {
    AST* node = term();

    while (cur_token == Token::PLUS || cur_token == Token::MINUS) {
        if (cur_token == Token::PLUS) {
            eat(Token::PLUS);
            node = new BinOp(node, Token::PLUS, term());
        } else if (cur_token == Token::MINUS) {
            eat(Token::MINUS);
            node = new BinOp(node, Token::MINUS, term());
        }
    }
    return node;
}

void Parser::eat(Token token) {
    if (cur_token == token)
        cur_token == lexer.get_next_token();
    else
        error();
}
// Interpreter ----------------------------------------------------
